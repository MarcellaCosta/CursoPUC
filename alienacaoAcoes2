pragma solidity 0.5.10;

contract AlienacaoAcoes {
    address payable public advogado;
    string public nomeDaSociedade;
    uint256 public numeroDeAcoes;
    uint256 public capitalSocial;

    Acionista [] public listaDeAcionistas;
    Alienacao [] public listaDeAlienacoes;
    
    struct Acionista {
        string nomeAcionista;
        uint256 cpfAcionista;
        address payable acionistaWallet;
        uint256 numeroDeAcoes;
    }
    
    struct Alienacao {
        address payable vendedorWallet;
        address payable compradorWallet;
        uint256 quantidadeDeAcoes;
        uint256 valorDaOperacao;
        uint256 dataDaOperacao;
        uint256 valorDaAcao;
    }
    
    constructor (string memory _nomeDaSociedade, uint256 _capitalSocial, uint256 _numeroDeAcoes) public {
        advogado =  msg.sender;
        nomeDaSociedade = _nomeDaSociedade;
        capitalSocial = _capitalSocial;
        numeroDeAcoes = _numeroDeAcoes;
    }
    
    function registrarAcionista(string memory _nome, uint256 _cpf, address payable _wallet, uint256 _numeroDeAcoes) public {
        require (msg.sender == advogado);
        listaDeAcionistas.push(Acionista(_nome, _cpf, _wallet, _numeroDeAcoes));
    }
    
    function autorizarAlienacao(uint256 _idVendedor, uint256 _idComprador, uint256 _acoesAlienadas, uint256 _dataDaOperacao, uint256 _valorAcao) public {
        require (msg.sender == listaDeAcionistas[_idVendedor].acionistaWallet);
        require (_acoesAlienadas <= listaDeAcionistas[_idVendedor].numeroDeAcoes);
        listaDeAlienacoes.push(Alienacao(listaDeAcionistas[_idComprador].acionistaWallet, listaDeAcionistas[_idVendedor].acionistaWallet, _acoesAlienadas, _acoesAlienadas*_valorAcao, _dataDaOperacao, _valorAcao));
    }
    
    function pagarAlienacao(uint256 _idAlienacao, uint256 _idVendedor, uint256 _idComprador) public payable {
        require (msg.sender == listaDeAlienacoes[_idAlienacao].compradorWallet);
        require (now <= listaDeAlienacoes[_idAlienacao].dataDaOperacao);
        require (msg.value >= listaDeAlienacoes[_idAlienacao].valorDaOperacao);
        listaDeAcionistas[_idVendedor].numeroDeAcoes -= listaDeAlienacoes[_idAlienacao].quantidadeDeAcoes;
        listaDeAcionistas[_idComprador].numeroDeAcoes += listaDeAlienacoes[_idAlienacao].quantidadeDeAcoes;
        listaDeAlienacoes[_idAlienacao].vendedorWallet.transfer(msg.value);
        listaDeAlienacoes[_idAlienacao].dataDaOperacao = now;
    }
}
    
